#!/usr/bin/env python3
# ==============================================================================
#
#          FILE:  hxlquickmeta
#
#         USAGE:  hxlquickmeta hxlated-data.hxl my-exported-file.example
#                 cat hxlated-data.hxl | hxlquickmeta > my-exported-file.csv
#                 # Via web, in two different terminals, do it
#                     hug -f bin/hxlquickmeta
#                     ngrok http 8000
#
#   DESCRIPTION:  hxlquickmeta is ...
#
#                 Hug API can be used to create an ad-hoc web interface to your
#                 script. This can be both useful if you are using an software
#                 that accepts an URL as data source and you don't want to use
#                 this script to save a file locally.
#
#       OPTIONS:  ---
#
#  REQUIREMENTS:  - python3
#                     - libhxl (https://pypi.org/project/libhxl/)
#                     - hug (https://github.com/hugapi/hug/)
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Emerson Rocha <rocha[at]ieee.org>
#       COMPANY:  EticaAI
#       LICENSE:  Public Domain dedication
#                 SPDX-License-Identifier: Unlicense
#       VERSION:  v0.6.5
#       CREATED:  2021-02-17 03:55 UTC
#      REVISION:  ---
# ==============================================================================

import sys
import os
import logging
import argparse

# @see https://github.com/HXLStandard/libhxl-python
#    pip3 install libhxl --upgrade
# Do not import hxl, to avoid circular imports
import hxl.converters
import hxl.filters
import hxl.io

import csv
import tempfile

# @see https://github.com/hugapi/hug
#     pip3 install hug --upgrade
import hug

# In Python2, sys.stdin is a byte stream; in Python3, it's a text stream
STDIN = sys.stdin.buffer


class HXLQuickMeta:
    """
    HXLQuickMeta is a classe to export already HXLated data in the format
    example.
    """

    def __init__(self):
        """
        Constructs all the necessary attributes for the HXLQuickMeta object.
        """
        self.hxlhelper = None
        self.args = None

        # Posix exit codes
        self.EXIT_OK = 0
        self.EXIT_ERROR = 1
        self.EXIT_SYNTAX = 2

    def make_args_hxlquickmeta(self):

        self.hxlhelper = HXLUtils()
        parser = self.hxlhelper.make_args(
            description=("hxlquickmeta is an example script to create other "
                         "scripts with some bare minimum command line "
                         "interfaces that could work to export HXL files to "
                         "other formats."))

        self.args = parser.parse_args()
        return self.args

    # def execute_cli(self, args,
    #                 stdin=STDIN, stdout=sys.stdout, stderr=sys.stderr):
    #     """
    #     The execute_cli is the main entrypoint of HXLQuickMeta. When
    #     called will convert the HXL source to example format.
    #     """

    #     # NOTE: the next lines, in fact, only generate an csv outut. So you
    #     #       can use as starting point.
    #     with self.hxlhelper.make_source(args, stdin) as source, \
    #             self.hxlhelper.make_output(args, stdout) as output:
    #         hxl.io.write_hxl(output.output, source,
    #                          show_tags=not args.strip_tags)

    #     return self.EXIT_OK

    def execute_cli(self, args, stdin=STDIN, stdout=sys.stdout,
                    stderr=sys.stderr, hxlmeta=False):
        """
        The execute_cli is the main entrypoint of HXL2Tab when used via command
        line interface.
        """
        # hxltabconverter = HXLTabConverter()

        # print(hxltabconverter.ORANGE_REFERENCE)
        # print(hxltabconverter.HXL_REFERENCE)

        # If the user specified an output file, we will save on
        # self.original_outfile. The args.outfile will be used for temporary
        # output
        if args.outfile:
            self.original_outfile = args.outfile
            self.original_outfile_is_stdout = False

        try:
            temp = tempfile.NamedTemporaryFile()
            args.outfile = temp.name

            with self.hxlhelper.make_source(args, stdin) as source, \
                    self.hxlhelper.make_output(args, stdout) as output:
                hxl.io.write_hxl(output.output, source,
                                 show_tags=not args.strip_tags)

            if True:  # if args.hxlmeta:
                print('TODO: hxlmeta')
                print('output.output', output.output)
                print('source', source)
                # print('source.columns', source.headers())
                hxlmeta = HXLMeta(local_hxl_file=output.output.name)
                hxlmeta.debuginfo()
            else:
                print('noop')
                # self.hxl2tab(args.outfile, self.original_outfile,
                #              self.original_outfile_is_stdout)

        finally:
            temp.close()

        return self.EXIT_OK

    def execute_web(self, source_url, stdin=STDIN, stdout=sys.stdout,
                    stderr=sys.stderr, hxlmeta=False):
        """
        The execute_web is the main entrypoint of HXL2Tab when this class is
        called outside command line interface, like the build in HTTP use with
        hug
        """

        # TODO: the execute_web needs to output the tabfile with correct
        #       mimetype, compression, etc
        #       (fititnt, 2021-02-07 15:59 UTC)

        self.hxlhelper = HXLUtils()

        try:
            temp_input = tempfile.NamedTemporaryFile('w')
            temp_output = tempfile.NamedTemporaryFile('w')

            webargs = type('obj', (object,), {
                "infile": source_url,
                "sheet_index": None,
                "selector": None,
                'sheet': None,
                'http_header': None,
                'ignore_certs': False
            })

            with self.hxlhelper.make_source(webargs, stdin) as source:
                for line in source.gen_csv(True, True):
                    temp_input.write(line)

                temp_input.seek(0)
                # self.hxl2tab(temp_input.name, temp_output.name, False)

                result_file = open(temp_input.name, 'r')
                return result_file.read()

        finally:
            temp_input.close()
            temp_output.close()

        return self.EXIT_OK


class HXLMeta:
    """
    HXLMeta is (...)

    Author: Multiple Authors
    License: Public Domain
    Version: v0.6.4
    """

    GLOSSARY = {
        # @see EticaAI-Data_HXL-Data-Science-file-formats_HXLMeta_Glossary
        #      https://docs.google.com/spreadsheets/d/
        #      1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=1066910203
        'DataType': {
            'name': "HXL Data Type (Official HXL Standard Data Type)",
            'description': "Since the HXL standard is meant to be easy to " +
                           "write also by information managers in the field," +
                           "most Data Types are implicit and some base " +
                           "hashtags enforce beyond the generic ‘text’. " +
                           "(#date assumes +date, affected assumes " +
                           "+num/number).",
            'table': "https://docs.google.com/spreadsheets/d/" +
            "1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=717813523"
        },
        'StorageType': {
            'name': "Variable Storage Type",
            'description': "Storage Type is one way to document low level" +
                           "storage type more specific to official HXL Data" +
                           "Types",
            'table': "https://docs.google.com/spreadsheets/d/" +
            "1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=211012023"
        },
        'StatisticalType': {
            'name': "Variable Statistical Data Type",
            'description': "In statistics, groups of individual data points " +
                           "may be classified as belonging to any of various "
                           "statistical data types, e.g. categorical (red, "
                           "blue, green), real number (1.68, -5, 1.7e+6), "
                           "odd number(1,3,5) etc. -- Wikipedia",
            'table': "https://docs.google.com/spreadsheets/d/" +
            "1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=1566300457"
        },
        'LevelType': {
            'name': "Variable Level of measurement Type",
            'description': "Level of measurement or scale of measure is a " +
                           "classification that describes " +
                           "the nature of information within the values " +
                           " assigned to variables. Psychologist Stanley " +
                           " Smith Stevens developed the best-known " +
                           "classification with four levels, or scales, of " +
                           "measurement: nominal, ordinal, interval, "
                           "and ratio. -- Wikipedia. "
                           "Note: while the current tables document only " +
                           "Stanley Smith Stevens classification, the " +
                           "LevelType actually could be used to represent " +
                           " other typologies if enough users could test " +
                           " them.",
            'table': "https://docs.google.com/spreadsheets/d/" +
            "1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=1053765950"
        },
        'UsageType': {
            'name': "Variable Usage Type",
            'description': "HXLMeta Usage Types can be used to define how " +
                           "external tools should use the variable (data on " +
                           "the column). The most common type that cannot " +
                           "be automatically safely detected is canonically " +
                           "called 'focus'/'focusN' (some softwares like " +
                           "PSPP/SPSS/SAS/WPA Analytics uses 'target', and " +
                           " Weka/Orange use 'class'; that's why these are " +
                           " considered direct aliases). ",
            'table': "https://docs.google.com/spreadsheets/d/" +
            "1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=617579056"
        },
        'WeightLevel': {
            'name': "Variable Weight",
            'description': "WeightLevel defines for both HXL-Aware tools " +
                           "or for exported files based on HXLated datasets" +
                           "the weight of one observation (a data row). " +
                           "This is intended mostly for statistical" +
                           "analysis, but most tools would treat this as " +
                           "meta information. The default weight is 1. " +
                           "Weight 0 means ignore. Negative weight (while " +
                           "allowed on HXL) are likely to raise errors on " +
                           "external tools.",
            'table': "https://docs.google.com/spreadsheets/d/" +
            "1vFkBSharAEg5g5K2u_iDLCBvpWWPqpzC1hcL6QpFNZY/edit#gid=1507056660"
        },
        'VariableLabel': {
            'description': "TODO: write here"
        },
        'VariableDescription': {
            'description': "TODO: write here"
        },
        'OriginaHashtag': {
            'description': "TODO: write here"
        }
    }

    # Uses HXL v1.1-final
    # @see https://hxlstandard.org/standard/1-1final/dictionary/
    # @see https://docs.google.com/spreadsheets/d/
    #      1En9FlmM8PrbTWgl3UHPF_MXnJ6ziVZFhBbojSJzBdLI/edit#gid=319251406
    # @see https://en.wikipedia.org/wiki/Statistical_data_type
    HXL_REFERENCE = {
        # 'hxl_core_datatypes': [
        #     'text', 'number', 'url', 'email', 'phone', 'date'
        # ]
        'hashtag': {
            # access
            # activity
            # adm1
            # adm2
            # adm3
            # adm4
            # adm5
            # affected | Number of people or households affected by an
            #            emergency
            'affected': {
                'datatype_hxl': "number",
                'datatype_statistical': "count",
            },
            # beneficiary
            # capacity
            # cause
            # channel
            # contact | Contact information for the subject of a data record
            #           (e.g. an activity).
            #           Since HXL 1.0.
            # country
            # crisis
            # currency
            # date | Date related to the data in the record applies.
            #        Preferred format is ISO 8610 (e.g. "2015-06-01",
            #        "2015-Q1", etc.)
            #        Since HXL 1.0.
            #        Note to self: date be viewed both as discrete and as
            #        continuous
            #        @see https://stats.stackexchange.com/questions/220812/
            #           time-is-a-continuous-or-discrete-variables
            'date': {
                'datatype_hxl': "date"
            },
            # delivery
            # description
            # event
            # frequency | The frequency with which something occurs.
            #             Since HXL 1.1.
            #             Note to self: need to check better if 95% of the time
            #             this is right
            #             @see https://en.wikipedia.org/wiki/Ordinal_data
            'frequency': {
                'datatype_statistical': "ordinal"
            },
            # geo
            # group
            # impact
            # indicator
            # inneed | Number of people or households in need of humanitarian
            #         assistance.
            'inneed': {
                'datatype_hxl': "number",
                'datatype_statistical': "count",
            },
            # item
            # loc
            # meta
            'meta': {
                'datafeature_hxl': "meta",
                'datafeature_orange': "meta",
            },
            # modality
            # need
            # operations
            # org
            # output
            # population | General population number for an area or location,
            #             regardless of their specific humanitarian needs.
            #             Since HXL 1.0.
            'population': {
                'datatype_hxl': "number",
                'datatype_statistical': "count",
            },
            # reached | Number of people or households reached with
            #           humanitarian assistance. Subset of #targeted.
            #           Since HXL 1.0.
            'reached': {
                'datatype_hxl': "number",
                'datatype_statistical': "count",
            },
            # region
            # respondee
            # sector
            # service
            # severity
            # status
            # subsector
            # targeted | Number of people or households targeted for
            #            humanitarian assistance. Subset of #inneed; superset
            #            of #reached.
            #            Since HXL 1.0.
            'targeted': {
                'datatype_hxl': "number",
                'datatype_statistical': "count",
            },
            # value | A monetary value, such as the price of goods in a market,
            #         a project budget, or the amount of cash transferred to
            #         beneficiaries. May be used together with #currency in
            #         financial or cash data.
            #         Since HXL 1.1.
            'value': {
                'datatype_hxl': "number"
            },
        },
        'attributes': {
            # ### HXL official Core attributes ________________________________
            # @see https://docs.google.com/spreadsheets/d/
            # 1En9FlmM8PrbTWgl3UHPF_MXnJ6ziVZFhBbojSJzBdLI/edit#gid=1810309357
            # +code
            'code': {
                'datatype_hxl': "text"
            },
            # +coord
            # +dest
            # +displaced
            # +elevation
            # +email (also an HXL Core Data Type)
            # +id
            # +label
            'label': {
                'datatype_hxl': "text"
            },
            # +lat
            # +lon
            # +name
            # +num
            'num': {
                'datatype_hxl': "number"
            },
            # +pct
            # +phone (also an HXL Core Data Type)
            # +start
            # +text  (also an HXL Core Data Type)
            # +type
            # +url  (also an HXL Core Data Type)
            # ### HXL Data Types ______________________________________________
            # text
            'text': {
                'datatype_hxl': "text"
            },
            # number
            'number': {
                'datatype_hxl': "number"
            },
            # url
            'url': {
                'datatype_hxl': "url",
                'dataflag_orange': "meta",
            },
            # email
            'email': {
                'datatype_hxl': "email",
                'dataflag_orange': "meta",
            },
            # phone
            'phone': {
                'datatype_hxl': "phone",
                'dataflag_orange': "meta",
            },
            # date
            'date': {
                'datatype_hxl': "date"
            },
        }
    }

    def __init__(self, local_hxl_file=None):
        """
        Constructs all the necessary attributes for the HXLMeta
        object.
        """

        # Posix exit codes
        self.EXIT_OK = 0
        self.EXIT_ERROR = 1
        self.EXIT_SYNTAX = 2

        # TODO: Use some abstraction instead of access directly the file
        self.local_hxl_file = local_hxl_file
        self.text_headers = None
        self.hxl_headers = None
        self.data_columns = None

    def debuginfo(self):
        print('debuginfo')
        with open(self.local_hxl_file, 'r') as csv_file:
            csv_reader = csv.reader(csv_file)
            line_1st = next(csv_reader)
            line_2nd = next(csv_reader)
            # line_start = -1

            if line_1st[0].find('#') == -1 and line_2nd[0].find('#') == 0:
                self.text_headers = line_1st
                self.hxl_headers = line_2nd
                # line_start = 1
            elif line_1st[0].find('#') == 0:
                self.text_headers = None
                self.hxl_headers = line_1st
                # line_start = 0
            else:
                raise Exception("HXLMetaUnknownSourceException")

            # for line in csv_reader:
            #    txt_writer.writerow(line)

            # Hotfix: skip first non-HXL header. Ideally I think the already
            # exported HXlated file should already save without headers.
            print('self.text_headers', self.text_headers)
            print('self.hxl_headers', self.hxl_headers)
            # header_original = next(csv_reader)
            # print('header_original', header_original)


class HXLUtils:
    """
    HXLUtils contains functions from the Console scripts of libhxl-python
    (HXLStandard/libhxl-python/blob/master/hxl/scripts.py) with few changes
    to be used as class (and have one single place to change).
    Last update on this class was 2021-01-25.

    Author: David Megginson
    License: Public Domain
    """

    def __init__(self):

        self.logger = logging.getLogger(__name__)

        # Posix exit codes
        self.EXIT_OK = 0
        self.EXIT_ERROR = 1
        self.EXIT_SYNTAX = 2

    def make_args(self, description, hxl_output=True):
        """Set up parser with default arguments.
        @param description: usage description to show
        @param hxl_output: if True (default), include options for HXL output.
        @returns: an argument parser, partly set up.
        """
        parser = argparse.ArgumentParser(description=description)
        parser.add_argument(
            'infile',
            help='HXL file to read (if omitted, use standard input).',
            nargs='?'
        )
        if hxl_output:
            parser.add_argument(
                'outfile',
                help='HXL file to write (if omitted, use standard output).',
                nargs='?'
            )
        parser.add_argument(
            '--sheet',
            help='Select sheet from a workbook (1 is first sheet)',
            metavar='number',
            type=int,
            nargs='?'
        )
        parser.add_argument(
            '--selector',
            help='JSONPath expression for starting point in JSON input',
            metavar='path',
            nargs='?'
        )
        parser.add_argument(
            '--http-header',
            help='Custom HTTP header to send with request',
            metavar='header',
            action='append'
        )
        if hxl_output:
            parser.add_argument(
                '--remove-headers',
                help='Strip text headers from the CSV output',
                action='store_const',
                const=True,
                default=False
            )
            parser.add_argument(
                '--strip-tags',
                help='Strip HXL tags from the CSV output',
                action='store_const',
                const=True,
                default=False
            )
        parser.add_argument(
            "--ignore-certs",
            help="Don't verify SSL connections (useful for self-signed)",
            action='store_const',
            const=True,
            default=False
        )
        parser.add_argument(
            '--log',
            help='Set minimum logging level',
            metavar='debug|info|warning|error|critical|none',
            choices=['debug', 'info', 'warning', 'error', 'critical'],
            default='error'
        )
        return parser

    def add_queries_arg(
        self,
        parser,
        help='Apply only to rows matching at least one query.'
    ):
        parser.add_argument(
            '-q',
            '--query',
            help=help,
            metavar='<tagspec><op><value>',
            action='append'
        )
        return parser

    def do_common_args(self, args):
        """Process standard args"""
        logging.basicConfig(
            format='%(levelname)s (%(name)s): %(message)s',
            level=args.log.upper())

    def make_source(self, args, stdin=STDIN):
        """Create a HXL input source."""

        # construct the input object
        input = self.make_input(args, stdin)
        return hxl.io.data(input)

    def make_input(self, args, stdin=sys.stdin, url_or_filename=None):
        """Create an input object"""

        if url_or_filename is None:
            url_or_filename = args.infile

        # sheet index
        sheet_index = args.sheet
        if sheet_index is not None:
            sheet_index -= 1

        # JSONPath selector
        selector = args.selector

        http_headers = self.make_headers(args)

        return hxl.io.make_input(
            url_or_filename or stdin,
            sheet_index=sheet_index,
            selector=selector,
            allow_local=True,  # TODO: consider change this for execute_web
            http_headers=http_headers,
            verify_ssl=(not args.ignore_certs)
        )

    def make_output(self, args, stdout=sys.stdout):
        """Create an output stream."""
        if args.outfile:
            return FileOutput(args.outfile)
        else:
            return StreamOutput(stdout)

    def make_headers(self, args):
        # get custom headers
        header_strings = []
        header = os.environ.get("HXL_HTTP_HEADER")
        if header is not None:
            header_strings.append(header)
        if args.http_header is not None:
            header_strings += args.http_header
        http_headers = {}
        for header in header_strings:
            parts = header.partition(':')
            http_headers[parts[0].strip()] = parts[2].strip()
        return http_headers


class FileOutput(object):
    """
    FileOutput contains is based on libhxl-python with no changes..
    Last update on this class was 2021-01-25.

    Author: David Megginson
    License: Public Domain
    """

    def __init__(self, filename):
        self.output = open(filename, 'w')

    def __enter__(self):
        return self

    def __exit__(self, value, type, traceback):
        self.output.close()


class StreamOutput(object):
    """
    StreamOutput contains is based on libhxl-python with no changes..
    Last update on this class was 2021-01-25.

    Author: David Megginson
    License: Public Domain
    """

    def __init__(self, output):
        self.output = output

    def __enter__(self):
        return self

    def __exit__(self, value, type, traceback):
        pass

    def write(self, s):
        self.output.write(s)


if __name__ == "__main__":

    hxlquickmeta = HXLQuickMeta()
    args = hxlquickmeta.make_args_hxlquickmeta()

    hxlquickmeta.execute_cli(args)


@hug.format.content_type('text/csv')
def output_csv(data, response):
    if isinstance(data, dict) and 'errors' in data:
        response.content_type = 'application/json'
        return hug.output_format.json(data)
    response.content_type = 'text/csv'
    if hasattr(data, "read"):
        return data

    return str(data).encode("utf8")


@hug.get('/hxlquickmeta_output.csv', output=output_csv)
def api_hxlquickmeta_output(source_url):
    """hxlquickmeta_output
    (@see https://github.com/EticaAI/HXL-Data-Science-file-formats)

    Example:
    http://localhost:8000/hxlquickmeta_output.csv?source_url=https://docs.google.com/spreadsheets/u/1/d/1l7POf1WPfzgJb-ks4JM86akFSvaZOhAUWqafSJsm3Y4/edit#gid=634938833

    """

    hxlquickmeta = HXLQuickMeta()

    return hxlquickmeta.execute_web(source_url)


@hug.get('/hxlmeta')
def api_hxlmeta(source_url):
    """hxlmeta (@see https://github.com/EticaAI/HXL-Data-Science-file-formats)

    Example:
    http://localhost:8000/hxlmeta?source_url=https://docs.google.com/spreadsheets/u/1/d/1l7POf1WPfzgJb-ks4JM86akFSvaZOhAUWqafSJsm3Y4/edit#gid=634938833

    """

    hxlquickmeta = HXLQuickMeta()

    return hxlquickmeta.execute_web(source_url=source_url, hxlmeta=True)

# TODO: https://chardet.github.io/
