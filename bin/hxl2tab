#!/usr/bin/env python3
#===============================================================================
#
#          FILE:  nginxlogs2csv
#
#         USAGE:  nginxlogs2csv -i access.log
#
#   DESCRIPTION:  
#
#       OPTIONS:  ---
#
#  REQUIREMENTS:  - python3
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Emerson Rocha <rocha[at]alligo.com.br>
#       COMPANY:  Alligo
#       LICENSE:  Public Domain dedication
#                 SPDX-License-Identifier: Unlicense
#       VERSION:  v1.1
#       CREATED:  2021-01-24 01:25 UTC
#      REVISION:  2021-01-24 02:52 UTC changed from POSIX shell script to python3
#===============================================================================

# TODO: change documentation style, see https://realpython.com/documenting-python-code/ (fititnt, 2021-01-24 02:54 UTC)
# @see https://stackoverflow.com/questions/5574702/how-to-print-to-stderr-in-python
# print("fatal error", file=sys.stderr)

import sys, os, gzip, getopt, argparse, re

# This line in special may need customization for your needs.
# @see https://codereview.stackexchange.com/questions/238232/regex-for-nginx-log-parser
# @see https://gist.github.com/hreeder/f1ffe1408d296ce0591d
# @see https://www.programmersought.com/article/7703577076/
# lineformat = re.compile(r"""(?P<ipaddress>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - - \[(?P<dateandtime>\d{2}\/[a-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2} (\+|\-)\d{4})\] ((\"(GET|POST) )(?P<url>.+)(http\/1\.1")) (?P<statuscode>\d{3}) (?P<bytessent>\d+) (?P<refferer>-|"([^"]+)") (["](?P<useragent>[^"]+)["])""", re.IGNORECASE)
lineformat = re.compile(r"""
   (?P<ipaddress>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+
   -\s+
   -\s+
   \[(?P<dateandtime>\d{2}\/[a-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2} (\+|\-)\d{4})\]\s+
   \"GET (?P<url>.+?(?=\ http\/1.1")) http\/1.1"\s+
   \d{3}\s+
   \d+\s+
   "-"\s+
   (?P<http_user_agent>.+?(?=\ ))\s+
   "-"\s+
   "(?P<x_forwaded_for>(.+?))"\s+
   "(?P<http_xb_user>(.+?))"\s+
   (?P<request_time>[+-]?([0-9]*[.])?[0-9]+)
   """,
   re.IGNORECASE | re.VERBOSE)
# lineformat = re.compile(r"""
#    s+
#    """,
#    re.IGNORECASE | re.VERBOSE)

class NGinxLogs:
    """
    Class to handle parsing of NGinx access/error files
    """

    def __init__(self):
        """
        Constructs all the necessary attributes for the NGinxLogs object.
        """
        self.source = None


    def init_cli(self, source, format):
        if os.path.isdir(source):
            for f in os.listdir(source, format):
                self.parse_file(f, format)
        else:
            self.parse_file(source, format)


    def parse_file(self, input_file, format):
        # print ('TODO.... [', input_file, ']')

        try:
            if input_file.endswith(".gz"):
                logfile = gzip.open(input_file)
                lines = logfile.readlines()
            else:
                logfile = open(input_file)
                lines = logfile.readlines()
        except (OSError, UnboundLocalError):
            print('cannot open', input_file)
            return

        self.parse_line_basic(None, True)

        for line in lines:

            self.parse_line_basic(line)
            # data = re.search(lineformat, line)
            # # data = re.search(lineformat, l.decode())

            # print(data)
            # if data:
            #     datadict = data.groupdict()
            #     ip = datadict["ipaddress"]
            #     datetimestring = datadict["dateandtime"]
            #     url = datadict["url"]
            #     bytessent = datadict["bytessent"]
            #     referrer = datadict["refferer"]
            #     useragent = datadict["useragent"]
            #     status = datadict["statuscode"]
            #     method = data.group(6)

            #     print (ip, \
            #         datetimestring, \
            #         url, \
            #         bytessent, \
            #         referrer, \
            #         useragent, \
            #         status, \
            #         method)
            # else:
            #     print("Regex failed, file [", input_file, ']', 'line: [', line, ']', file=sys.stderr)

        logfile.close()


    def parse_line_ip(self, line, header_only=False):

        if header_only:
            print ("ip")
            return

        line_splitted = line.split(' ')
        print (line_splitted[0])


    def parse_line_basic(self, line, header_only=False):

        if header_only:
            print ("ip,datetime")
            return

        line_splitted_a = line.split(' ')
        line_splitted_b = line.split(']')
        line_splitted_b_i = line_splitted_b[0].split('[')
        # print (line_splitted_a)
        # print (line_splitted_b_i)
        # print (line_splitted_b_i[-1])
        print ('{},{}'.format(line_splitted_a[0], line_splitted_b_i[-1]))


# @see https://docs.python.org/3/howto/argparse.html

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("source",  help="File/directory to use as source")
    parser.add_argument('--source-formater-basic', action='store_const', const='basic', dest='format', default='basic', help='Format Basic')
    parser.add_argument('--source-formater-full', action='store_const', const='full', dest='format', help='Format Full (may fail)')
    parser.add_argument('--source-formater-ip', action='store_const', const='ip', dest='format', help='Format IP (fallback, simple)')
    args = parser.parse_args()
    # print('args.source', args.source)
    print('args.format', args.format)

    exec = NGinxLogs()
    exec.init_cli(args.source, args.format)
