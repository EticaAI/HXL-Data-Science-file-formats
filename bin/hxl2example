#!/usr/bin/env python3
# ===============================================================================
#
#          FILE:  hxl2example
#
#         USAGE:  hxl2example hxlated-data.hxl my-exported-file.example
#                 cat hxlated-data.hxl | hxl2example > my-exported-file.example
#
#   DESCRIPTION:  hxl2example is an example script to create other scripts with
#                 some bare minimum command line interface that could work.
#                 With exception of external libraries, the hxl2example is meant
#                 to be somewhat self-contained one-file executable ready to
#                 just be added to the path
#
#       OPTIONS:  ---
#
#  REQUIREMENTS:  - python3
#                     - libhxl (@see https://pypi.org/project/libhxl/)
#                     - your-extra-python-lib-here
#                 - your-non-python-dependency-here
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Your Name <you[at]example.org>
#       COMPANY:  Your Company
#       LICENSE:  Your License here
#       VERSION:  v1.0
#       CREATED:  YYYY-MM-DD hh:mm UTC
#      REVISION:  ---
# ===============================================================================

# TODO: hxl2example needs to accept commands as parameters instead of hardcoded
#       values (fititnt, 2021-01-25 01:26 UTC)
# TODO: hxl2example needs not just accept command line arguments, but minimally
#       useful ones (fititnt, 2021-01-25 01:28 UTC)

import sys, os, logging
import argparse
import hxl

# In Python2, sys.stdin is a byte stream; in Python3, it's a text stream
STDIN = sys.stdin.buffer


class HXL2Example:
    """
    HXL2Example is a classe to export already HXLated data in the format
    example.
    """

    def __init__(self):
        """
        Constructs all the necessary attributes for the HXL2Example object.
        """

        self.logger = logging.getLogger(__name__)


        # In Python2, sys.stdin is a byte stream; in Python3, it's a text stream
        # self.STDIN = sys.stdin.buffer

        # Posix exit codes
        self.EXIT_OK = 0
        self.EXIT_ERROR = 1
        self.EXIT_SYNTAX = 2

        # self.source = None


class HXLUtils:
    """
    HXLUtils contains functions from the Console scripts of libhxl-python
    (HXLStandard/libhxl-python/blob/master/hxl/scripts.py) with few changes
    to be used as class (and have one single place to change).
    Last update on this class was 2021-01-25.

    Author: David Megginson
    License: Public Domain
    """

    def __init__(self):
        self.source = None

    def make_args(self, description, hxl_output=True):
        """Set up parser with default arguments.
        @param description: usage description to show
        @param hxl_output: if True (default), include options for HXL output.
        @returns: an argument parser, partly set up.
        """
        parser = argparse.ArgumentParser(description=description)
        parser.add_argument(
            'infile',
            help='HXL file to read (if omitted, use standard input).',
            nargs='?'
        )
        if hxl_output:
            parser.add_argument(
                'outfile',
                help='HXL file to write (if omitted, use standard output).',
                nargs='?'
            )
        parser.add_argument(
            '--sheet',
            help='Select sheet from a workbook (1 is first sheet)',
            metavar='number',
            type=int,
            nargs='?'
        )
        parser.add_argument(
            '--selector',
            help='JSONPath expression for starting point in JSON input',
            metavar='path',
            nargs='?'
        )
        parser.add_argument(
            '--http-header',
            help='Custom HTTP header to send with request',
            metavar='header',
            action='append'
        )
        if hxl_output:
            parser.add_argument(
                '--remove-headers',
                help='Strip text headers from the CSV output',
                action='store_const',
                const=True,
                default=False
            )
            parser.add_argument(
                '--strip-tags',
                help='Strip HXL tags from the CSV output',
                action='store_const',
                const=True,
                default=False
            )
        parser.add_argument(
            "--ignore-certs",
            help="Don't verify SSL connections (useful for self-signed)",
            action='store_const',
            const=True,
            default=False
        )
        parser.add_argument(
            '--log',
            help='Set minimum logging level',
            metavar='debug|info|warning|error|critical|none',
            choices=['debug', 'info', 'warning', 'error', 'critical'],
            default='error'
        )
        return parser


    def add_queries_arg(self, parser, help='Apply only to rows matching at least one query.'):
        parser.add_argument(
            '-q',
            '--query',
            help=help,
            metavar='<tagspec><op><value>',
            action='append'
        )
        return parser


    def do_common_args(self, args):
        """Process standard args"""
        logging.basicConfig(format='%(levelname)s (%(name)s): %(message)s', level=args.log.upper())


    def make_source(self, args, stdin=STDIN):
        """Create a HXL input source."""

        # construct the input object
        input = self.make_input(args, stdin)
        return hxl.io.data(input)


    def make_input(self, args, stdin=sys.stdin, url_or_filename=None):
        """Create an input object"""

        if url_or_filename is None:
            url_or_filename = args.infile

        # sheet index
        sheet_index = args.sheet
        if sheet_index is not None:
            sheet_index -= 1

        # JSONPath selector
        selector = args.selector

        http_headers = self.make_headers(args)

        return hxl.io.make_input(
            url_or_filename or stdin,
            sheet_index=sheet_index,
            selector=selector,
            allow_local=True,
            http_headers=http_headers,
            verify_ssl=(not args.ignore_certs)
        )


    def make_output(self, args, stdout=sys.stdout):
        """Create an output stream."""
        if args.outfile:
            return FileOutput(args.outfile)
        else:
            return StreamOutput(stdout)


    def make_headers (self, args):
        # get custom headers
        header_strings = []
        header = os.environ.get("HXL_HTTP_HEADER")
        if header is not None:
            header_strings.append(header)
        if args.http_header is not None:
            header_strings += args.http_header
        http_headers = {}
        for header in header_strings:
            parts = header.partition(':')
            http_headers[parts[0].strip()] = parts[2].strip()
        return http_headers




class FileOutput(object):
    """
    FileOutput contains is based on libhxl-python with no changes..
    Last update on this class was 2021-01-25.

    Author: David Megginson
    License: Public Domain
    """


    def __init__(self, filename):
        self.output = open(filename, 'w')

    def __enter__(self):
        return self

    def __exit__(self, value, type, traceback):
        self.output.close()


class StreamOutput(object):
    """
    StreamOutput contains is based on libhxl-python with no changes..
    Last update on this class was 2021-01-25.

    Author: David Megginson
    License: Public Domain
    """

    def __init__(self, output):
        self.output = output

    def __enter__(self):
        return self

    def __exit__(self, value, type, traceback):
        pass

    def write(self, s):
        self.output.write(s)


# dataset = hxl.data('./tests/files/iris_hxlated-csv.csv', allow_local=True)

# for line in dataset.cache().gen_csv():
#     print(line)

if __name__ == "__main__":

    hxlhelper = HXLUtils()
    parser = hxlhelper.make_args(
        description=("hxl2example is an example script to create other "
                     "scripts with some bare minimum command line interfaces "
                     "that could work to export HXL files to other formats."))

    args = parser.parse_args()
    # print('args.source', args.source)
    print('args.format', args.format)

    # exec = HXL2Example()
    # exec.init_cli(args.source, args.format)
