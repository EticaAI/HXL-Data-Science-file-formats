[metadata]
# Emerson Rocha notes:
#     using username '-eticaai' to provide some namespace
#     we're not planning to release this on pip (at least not soon, since
#     exist both security implications and voluntarily void estimulate
#     people to publish forks)
#
#     Also, note that for > HDSL3, like HDSL4, something that on humanitarian
#     context would be considered 'Strictly Confidential', so the idea of
#     design an plugin system is taking in account regional usage, like
#     Brazilian PPCAAM or related to comptroller/ombudsman/organized crime/etc
#     be able to extend/validate.

# NOTE: Would "hdp-toolchain" be a good umbrela name for all things the current
#       package offers? See
#         - https://pt.wikipedia.org/wiki/Conjunto_de_ferramentas_GNU
#         - https://en.wikipedia.org/wiki/Toolchain
# name = hxlm-base-eticaai  # New temporary name 'hdp-toolchain' on 2021-03-30
name = hdp-toolchain
version = 0.8.6
author = Emerson Rocha
author_email = rocha@ieee.org
description = HDP Declarative Programming (working draft)
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/EticaAI/HXL-Data-Science-file-formats
project_urls =
    Bug Tracker = https://github.com/EticaAI/HXL-Data-Science-file-formats/issues
classifiers =
    Programming Language :: Python :: 3
    License :: OSI Approved :: The Unlicense (Unlicense)
    Operating System :: OS Independent
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Typing :: Typed
    Topic :: Utilities

[options]

python_requires = >=3.7
install_requires =
    libhxl
    pygments
    cryptography
    keyring

namespace_packages = hxlm
packages =
    hxlm.core
    hxlm.core._dt
    hxlm.core.bin
    hxlm.core.hdp
    hxlm.core.hdp.util
    hxlm.core.htype
    hxlm.core.internal
    hxlm.core.io
    hxlm.core.schema
    hxlm.core.urn
    hxlm.data.baseline
    hxlm.data.exemplum
    hxlm.data.hxl
    hxlm.data.udhr
    hxlm.lisp
    hxlm.lisp.bootstrapper
    hxlm.locale
    hxlm.locale.pt.LC_MESSAGES
    hxlm.ontologia
    hxlm.ontologia.python
    hxlm.ontologia.python.hdp
    hxlm.routing
    hxlm.taxonomy
    hxlm.plugin.xa_amnesty
    hxlm.plugin.xa_gdpr
    hxlm.plugin.xa_humanitarian
    hxlm.plugin.xa_lgpd
    hxlm.plugin.xa_rc
    hxlm.plugin.xa_sus
    hxlm.plugin.xl_por
    hxlm.plugin.xz_eticaai

include_package_data = True

[options.package_data]
# * = *.yml, *.json, *.csv
hxlm.core.bin = *.yml
hxlm.core.schema = *.yml, *.json, *.csv
hxlm.data.baseline = *.yml, *.json, *.csv
hxlm.data.exemplum = *.yml, *.json, *.csv
hxlm.data.hxl = *.yml, *.json, *.csv
hxlm.data.udhr = *.yml, *.json, *.csv
hxlm.locale = *.pot, *.po
hxlm.locale.pt.LC_MESSAGES = *.po, *.mo
hxlm.ontologia = *.yml, *.json, .ebnf, *.md
# TODO: implement some way to compile the .mo files from .po translations

[options.entry_points]
console_scripts =
    ; urnresolver = hxlm.core.bin.urnresolver:main
    ; urnresolver = hxlm.core.bin.urnresolver:urnresolver
    hdpcli = hxlm.core.bin.hdpcli:exec_from_console_scripts
    urnresolver = hxlm.core.bin.urnresolver:exec_from_console_scripts

# libhxl
# pyyaml  # for config files, but we could also allow json?

# TODO: maybe?
#       - https://github.com/Julian/jsonschema
#       - https://python-jsonschema.readthedocs.io/en/stable/
